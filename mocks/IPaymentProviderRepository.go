// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	paymentproviderrepo "github.com/hansengotama/disbursement/internal/repository/paymentprovider"
	mock "github.com/stretchr/testify/mock"
)

// IPaymentProviderRepository is an autogenerated mock type for the IPaymentProviderRepository type
type IPaymentProviderRepository struct {
	mock.Mock
}

// GetAdminFeeByGUID provides a mock function with given fields: param
func (_m *IPaymentProviderRepository) GetAdminFeeByGUID(param paymentproviderrepo.GetAdminFeeByGUIDParam) (float64, error) {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminFeeByGUID")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(paymentproviderrepo.GetAdminFeeByGUIDParam) (float64, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(paymentproviderrepo.GetAdminFeeByGUIDParam) float64); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(paymentproviderrepo.GetAdminFeeByGUIDParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: param
func (_m *IPaymentProviderRepository) Insert(param paymentproviderrepo.InsertPaymentProviderParam) error {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(paymentproviderrepo.InsertPaymentProviderParam) error); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPaymentProviderRepository creates a new instance of IPaymentProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPaymentProviderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPaymentProviderRepository {
	mock := &IPaymentProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
