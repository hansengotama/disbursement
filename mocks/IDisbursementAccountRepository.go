// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	disbursementaccountrepo "github.com/hansengotama/disbursement/internal/repository/disbursementaccount"
	mock "github.com/stretchr/testify/mock"
)

// IDisbursementAccountRepository is an autogenerated mock type for the IDisbursementAccountRepository type
type IDisbursementAccountRepository struct {
	mock.Mock
}

// GetByGUID provides a mock function with given fields: param
func (_m *IDisbursementAccountRepository) GetByGUID(param disbursementaccountrepo.GetByGUIDParam) (*disbursementaccountrepo.GetByGUIDParamRes, error) {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for GetByGUID")
	}

	var r0 *disbursementaccountrepo.GetByGUIDParamRes
	var r1 error
	if rf, ok := ret.Get(0).(func(disbursementaccountrepo.GetByGUIDParam) (*disbursementaccountrepo.GetByGUIDParamRes, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(disbursementaccountrepo.GetByGUIDParam) *disbursementaccountrepo.GetByGUIDParamRes); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*disbursementaccountrepo.GetByGUIDParamRes)
		}
	}

	if rf, ok := ret.Get(1).(func(disbursementaccountrepo.GetByGUIDParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: param
func (_m *IDisbursementAccountRepository) Insert(param disbursementaccountrepo.InsertDisbursementAccountParam) error {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(disbursementaccountrepo.InsertDisbursementAccountParam) error); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIDisbursementAccountRepository creates a new instance of IDisbursementAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDisbursementAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDisbursementAccountRepository {
	mock := &IDisbursementAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
