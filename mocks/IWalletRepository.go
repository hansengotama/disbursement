// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	walletrepo "github.com/hansengotama/disbursement/internal/repository/wallet"
	mock "github.com/stretchr/testify/mock"
)

// IWalletRepository is an autogenerated mock type for the IWalletRepository type
type IWalletRepository struct {
	mock.Mock
}

// GetWalletBalanceByUserID provides a mock function with given fields: param
func (_m *IWalletRepository) GetWalletBalanceByUserID(param walletrepo.GetWalletBalanceByUserIDParam) (float64, error) {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletBalanceByUserID")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(walletrepo.GetWalletBalanceByUserIDParam) (float64, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(walletrepo.GetWalletBalanceByUserIDParam) float64); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(walletrepo.GetWalletBalanceByUserIDParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: param
func (_m *IWalletRepository) Insert(param walletrepo.InsertWalletParam) error {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(walletrepo.InsertWalletParam) error); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletBalanceByUserID provides a mock function with given fields: param
func (_m *IWalletRepository) UpdateWalletBalanceByUserID(param walletrepo.UpdateWalletBalanceByUserIDParam) error {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWalletBalanceByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(walletrepo.UpdateWalletBalanceByUserIDParam) error); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIWalletRepository creates a new instance of IWalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWalletRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWalletRepository {
	mock := &IWalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
