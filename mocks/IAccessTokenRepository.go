// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	accesstokenrepo "github.com/hansengotama/disbursement/internal/repository/accesstoken"
	mock "github.com/stretchr/testify/mock"
)

// IAccessTokenRepository is an autogenerated mock type for the IAccessTokenRepository type
type IAccessTokenRepository struct {
	mock.Mock
}

// GetAccessToken provides a mock function with given fields: param
func (_m *IAccessTokenRepository) GetAccessToken(param accesstokenrepo.GetAccessTokenParam) (*accesstokenrepo.GetAccessTokenResponse, error) {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 *accesstokenrepo.GetAccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(accesstokenrepo.GetAccessTokenParam) (*accesstokenrepo.GetAccessTokenResponse, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(accesstokenrepo.GetAccessTokenParam) *accesstokenrepo.GetAccessTokenResponse); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accesstokenrepo.GetAccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(accesstokenrepo.GetAccessTokenParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: param
func (_m *IAccessTokenRepository) Insert(param accesstokenrepo.InsertAccessTokenParam) error {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(accesstokenrepo.InsertAccessTokenParam) error); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAccessTokenRepository creates a new instance of IAccessTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAccessTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAccessTokenRepository {
	mock := &IAccessTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
