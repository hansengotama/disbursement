// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	cacherepo "github.com/hansengotama/disbursement/internal/repository/cache"
	mock "github.com/stretchr/testify/mock"
)

// ICacheRepository is an autogenerated mock type for the ICacheRepository type
type ICacheRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: param
func (_m *ICacheRepository) Get(param cacherepo.GetParam) cacherepo.Response {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 cacherepo.Response
	if rf, ok := ret.Get(0).(func(cacherepo.GetParam) cacherepo.Response); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cacherepo.Response)
		}
	}

	return r0
}

// Set provides a mock function with given fields: param
func (_m *ICacheRepository) Set(param cacherepo.SetParam) cacherepo.Response {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 cacherepo.Response
	if rf, ok := ret.Get(0).(func(cacherepo.SetParam) cacherepo.Response); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cacherepo.Response)
		}
	}

	return r0
}

// NewICacheRepository creates a new instance of ICacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICacheRepository {
	mock := &ICacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
